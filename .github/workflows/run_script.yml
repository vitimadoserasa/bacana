import time
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager

def extract_ad_data():
    print("Iniciando a extra√ß√£o de dados de an√∫ncios...")

    chrome_options = Options()
    chrome_options.add_argument("--headless")  # Executa sem interface gr√°fica
    chrome_options.add_argument("--no-sandbox")  
    chrome_options.add_argument("--disable-dev-shm-usage")

    # Instala e configura o ChromeDriver
    service = Service(ChromeDriverManager().install())
    driver = webdriver.Chrome(service=service, options=chrome_options)

    try:
        # üîπ Criando um HTML tempor√°rio para carregar o JS Async
        html_content = """
        <html>
        <head>
            <title>Teste de An√∫ncio JS Async</title>
        </head>
        <body>
            <h1>Bem-vindo ao Teste de An√∫ncios</h1>

            <!-- üîπ Div onde o an√∫ncio ser√° carregado -->
            <div id="atContainer-f6facc0ef48e1dfaf88283c5ead94135"></div>

            <!-- üîπ Tag JS Async para carregar o an√∫ncio -->
            <script type="text/javascript">
                if (typeof atAsyncOptions !== 'object') var atAsyncOptions = [];
                atAsyncOptions.push({
                    'key': 'f6facc0ef48e1dfaf88283c5ead94135',
                    'format': 'js',
                    'async': true,
                    'container': 'atContainer-f6facc0ef48e1dfaf88283c5ead94135',
                    'params' : {}
                });
                var script = document.createElement('script');
                script.type = "text/javascript";
                script.async = true;
                script.src = 'http' + (location.protocol === 'https:' ? 's' : '') + '://www.highperformanceformat.com/f6facc0ef48e1dfaf88283c5ead94135/invoke.js';
                document.getElementsByTagName('head')[0].appendChild(script);
            </script>
        </body>
        </html>
        """

        # üîπ Salvando o HTML tempor√°rio em um arquivo
        with open("ad_test.html", "w", encoding="utf-8") as f:
            f.write(html_content)

        # üîπ Abrindo o arquivo local no Selenium
        driver.get("file://" + "/home/ubuntu/ad_test.html")

        wait = WebDriverWait(driver, 30)

        print("Aguardando o carregamento do cont√™iner do an√∫ncio...")
        
        # üîπ Espera at√© que o cont√™iner do an√∫ncio esteja presente na p√°gina
        ad_container = wait.until(
            EC.presence_of_element_located((By.ID, "atContainer-f6facc0ef48e1dfaf88283c5ead94135"))
        )
        print("Cont√™iner do an√∫ncio encontrado!")

        # üîπ Obter o conte√∫do do an√∫ncio dentro do cont√™iner
        container_html = ad_container.get_attribute("innerHTML")
        print("HTML do cont√™iner do an√∫ncio:")
        print(container_html)

        # üîπ Extrair a URL da imagem e do link, se estiverem dispon√≠veis
        ad_image = None
        ad_link = None

        try:
            ad_image_element = ad_container.find_element(By.TAG_NAME, "img")
            ad_image = ad_image_element.get_attribute("src")
            print(f"URL da imagem do an√∫ncio: {ad_image}")
        except Exception as e:
            print(f"N√£o foi poss√≠vel encontrar a imagem do an√∫ncio: {e}")

        try:
            ad_link_element = ad_container.find_element(By.TAG_NAME, "a")
            ad_link = ad_link_element.get_attribute("href")
            print(f"URL do link do an√∫ncio: {ad_link}")
        except Exception as e:
            print(f"N√£o foi poss√≠vel encontrar o link do an√∫ncio: {e}")

        return {"image_url": ad_image, "link_url": ad_link}

    except Exception as e:
        print(f"Erro ao processar an√∫ncio: {e}")
        return {"image_url": None, "link_url": None}

    finally:
        driver.quit()

if __name__ == "__main__":
    ad_data = extract_ad_data()
    print(ad_data)
